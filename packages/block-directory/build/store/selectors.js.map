{"version":3,"sources":["@wordpress/block-directory/src/store/selectors.js"],"names":["isRequestingDownloadableBlocks","state","filterValue","downloadableBlocks","isRequesting","getDownloadableBlocks","results","getInstalledBlockTypes","blockManagement","installedBlockTypes","getNewBlockTypes","select","usedBlockTree","getBlocks","newBlockTypes","forEach","blockType","push","getUnusedBlockTypes","isInstalling","blockId","getErrorNotices","errorNotices","getErrorNoticeForBlock"],"mappings":";;;;;;;;;;;;;;;AAGA;;AAKA;;AARA;;;;AAKA;;;;AAKA;;;;;;;;;AASO,SAASA,8BAAT,CAAyCC,KAAzC,EAAgDC,WAAhD,EAA8D;AACpE,MACC,CAAED,KAAK,CAACE,kBAAN,CAA0BD,WAA1B,CAAF,IACA,CAAED,KAAK,CAACE,kBAAN,CAA0BD,WAA1B,EAAwCE,YAF3C,EAGE;AACD,WAAO,KAAP;AACA;;AACD,SAAOH,KAAK,CAACE,kBAAN,CAA0BD,WAA1B,EAAwCE,YAA/C;AACA;AAED;;;;;;;;;;AAQO,SAASC,qBAAT,CAAgCJ,KAAhC,EAAuCC,WAAvC,EAAqD;AAC3D,MACC,CAAED,KAAK,CAACE,kBAAN,CAA0BD,WAA1B,CAAF,IACA,CAAED,KAAK,CAACE,kBAAN,CAA0BD,WAA1B,EAAwCI,OAF3C,EAGE;AACD,WAAO,EAAP;AACA;;AACD,SAAOL,KAAK,CAACE,kBAAN,CAA0BD,WAA1B,EAAwCI,OAA/C;AACA;AAED;;;;;;;;;AAOO,SAASC,sBAAT,CAAiCN,KAAjC,EAAyC;AAC/C,SAAOA,KAAK,CAACO,eAAN,CAAsBC,mBAA7B;AACA;AAED;;;;;;;;;;AAQO,IAAMC,gBAAgB,GAAG,kCAC/B,UAAEC,MAAF;AAAA,SAAc,UAAEV,KAAF,EAAa;AAC1B,QAAMW,aAAa,GAAGD,MAAM,CAAE,mBAAF,CAAN,CAA8BE,SAA9B,EAAtB;AACA,QAAMJ,mBAAmB,GAAGF,sBAAsB,CAAEN,KAAF,CAAlD;AAEA,QAAMa,aAAa,GAAG,EAAtB;AACAL,IAAAA,mBAAmB,CAACM,OAApB,CAA6B,UAAEC,SAAF,EAAiB;AAC7C,UAAK,2BAAcA,SAAd,EAAyBJ,aAAzB,CAAL,EAAgD;AAC/CE,QAAAA,aAAa,CAACG,IAAd,CAAoBD,SAApB;AACA;AACD,KAJD;AAMA,WAAOF,aAAP;AACA,GAZD;AAAA,CAD+B,CAAzB;AAgBP;;;;;;;;;;AAQO,IAAMI,mBAAmB,GAAG,kCAClC,UAAEP,MAAF;AAAA,SAAc,UAAEV,KAAF,EAAa;AAC1B,QAAMW,aAAa,GAAGD,MAAM,CAAE,mBAAF,CAAN,CAA8BE,SAA9B,EAAtB;AACA,QAAMJ,mBAAmB,GAAGF,sBAAsB,CAAEN,KAAF,CAAlD;AAEA,QAAMa,aAAa,GAAG,EAAtB;AACAL,IAAAA,mBAAmB,CAACM,OAApB,CAA6B,UAAEC,SAAF,EAAiB;AAC7C,UAAK,CAAE,2BAAcA,SAAd,EAAyBJ,aAAzB,CAAP,EAAkD;AACjDE,QAAAA,aAAa,CAACG,IAAd,CAAoBD,SAApB;AACA;AACD,KAJD;AAMA,WAAOF,aAAP;AACA,GAZD;AAAA,CADkC,CAA5B;AAgBP;;;;;;;;;;;AAQO,SAASK,YAAT,CAAuBlB,KAAvB,EAA8BmB,OAA9B,EAAwC;AAC9C,SAAOnB,KAAK,CAACO,eAAN,CAAsBW,YAAtB,CAAoCC,OAApC,KAAiD,KAAxD;AACA;AAED;;;;;;;;;AAOO,SAASC,eAAT,CAA0BpB,KAA1B,EAAkC;AACxC,SAAOA,KAAK,CAACqB,YAAb;AACA;AAED;;;;;;;;;;AAQO,SAASC,sBAAT,CAAiCtB,KAAjC,EAAwCmB,OAAxC,EAAkD;AACxD,SAAOnB,KAAK,CAACqB,YAAN,CAAoBF,OAApB,CAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport hasBlockType from './utils/has-block-type';\n\n/**\n * Returns true if application is requesting for downloadable blocks.\n *\n * @param {Object} state Global application state.\n * @param {string} filterValue Search string.\n *\n *\n * @return {Array} Downloadable blocks\n */\nexport function isRequestingDownloadableBlocks( state, filterValue ) {\n\tif (\n\t\t! state.downloadableBlocks[ filterValue ] ||\n\t\t! state.downloadableBlocks[ filterValue ].isRequesting\n\t) {\n\t\treturn false;\n\t}\n\treturn state.downloadableBlocks[ filterValue ].isRequesting;\n}\n\n/**\n * Returns the available uninstalled blocks\n *\n * @param {Object} state       Global application state.\n * @param {string} filterValue Search string.\n *\n * @return {Array} Downloadable blocks\n */\nexport function getDownloadableBlocks( state, filterValue ) {\n\tif (\n\t\t! state.downloadableBlocks[ filterValue ] ||\n\t\t! state.downloadableBlocks[ filterValue ].results\n\t) {\n\t\treturn [];\n\t}\n\treturn state.downloadableBlocks[ filterValue ].results;\n}\n\n/**\n * Returns the block types that have been installed on the server.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Block type items.\n */\nexport function getInstalledBlockTypes( state ) {\n\treturn state.blockManagement.installedBlockTypes;\n}\n\n/**\n * Returns block types that have been installed on the server and used in the\n * current post.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Block type items.\n */\nexport const getNewBlockTypes = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst usedBlockTree = select( 'core/block-editor' ).getBlocks();\n\t\tconst installedBlockTypes = getInstalledBlockTypes( state );\n\n\t\tconst newBlockTypes = [];\n\t\tinstalledBlockTypes.forEach( ( blockType ) => {\n\t\t\tif ( hasBlockType( blockType, usedBlockTree ) ) {\n\t\t\t\tnewBlockTypes.push( blockType );\n\t\t\t}\n\t\t} );\n\n\t\treturn newBlockTypes;\n\t}\n);\n\n/**\n * Returns the block types that have been installed on the server but are not\n * used in the current post.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Block type items.\n */\nexport const getUnusedBlockTypes = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst usedBlockTree = select( 'core/block-editor' ).getBlocks();\n\t\tconst installedBlockTypes = getInstalledBlockTypes( state );\n\n\t\tconst newBlockTypes = [];\n\t\tinstalledBlockTypes.forEach( ( blockType ) => {\n\t\t\tif ( ! hasBlockType( blockType, usedBlockTree ) ) {\n\t\t\t\tnewBlockTypes.push( blockType );\n\t\t\t}\n\t\t} );\n\n\t\treturn newBlockTypes;\n\t}\n);\n\n/**\n * Returns true if application is calling install endpoint.\n *\n * @param {Object} state Global application state.\n * @param {string} blockId Id of the block.\n *\n * @return {boolean} Whether its currently installing\n */\nexport function isInstalling( state, blockId ) {\n\treturn state.blockManagement.isInstalling[ blockId ] || false;\n}\n\n/**\n * Returns the error notices\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Object with error notices.\n */\nexport function getErrorNotices( state ) {\n\treturn state.errorNotices;\n}\n\n/**\n * Returns the error notice for a given block.\n *\n * @param {Object} state   Global application state.\n * @param {string} blockId The ID of the block plugin. eg: my-block\n *\n * @return {string|boolean} The error text, or false if no error.\n */\nexport function getErrorNoticeForBlock( state, blockId ) {\n\treturn state.errorNotices[ blockId ];\n}\n"]}