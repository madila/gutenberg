{"version":3,"sources":["@wordpress/block-editor/src/components/block-edit/edit.js"],"names":["DEFAULT_BLOCK_CONTEXT","Edit","props","attributes","name","blockType","blockContext","BlockContext","context","alternative","version","hint","link","usesContext","Component","edit","save","lightBlockWrapper","generatedClassName","className"],"mappings":";;;;;;;;;AAgBA;;;;AAbA;;AACA;;AAKA;;AACA;;AAKA;;AAMA;;AArBA;;;;AAMA;;;;AAYA;;;;AAKA;;;;;;;;AAQA,IAAMA,qBAAqB,GAAG,EAA9B;;AAEO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAEC,KAAF,EAAa;AAAA,0BACEA,KADF,CACxBC,UADwB;AAAA,MACxBA,UADwB,kCACX,EADW;AAAA,MACPC,IADO,GACEF,KADF,CACPE,IADO;AAEhC,MAAMC,SAAS,GAAG,0BAAcD,IAAd,CAAlB;AACA,MAAME,YAAY,GAAG,yBAAYC,qBAAZ,CAArB,CAHgC,CAKhC;;AACA,MAAMC,OAAO,GAAG,sBAAS,YAAM;AAC9B,QAAKH,SAAS,IAAIA,SAAS,CAACG,OAA5B,EAAsC;AACrC,+BAAY,6BAAZ,EAA2C;AAC1CC,QAAAA,WAAW,EAAE,eAD6B;AAE1CC,QAAAA,OAAO,EAAE,OAFiC;AAG1CC,QAAAA,IAAI,oBAAaP,IAAb,QAHsC;AAI1CQ,QAAAA,IAAI,EACH;AALyC,OAA3C;AAOA,aAAO,kBAAMN,YAAN,EAAoBD,SAAS,CAACG,OAA9B,CAAP;AACA;;AAED,WAAOH,SAAS,IAAIA,SAAS,CAACQ,WAAvB,GACJ,kBAAMP,YAAN,EAAoBD,SAAS,CAACQ,WAA9B,CADI,GAEJb,qBAFH;AAGA,GAfe,EAeb,CAAEK,SAAF,EAAaC,YAAb,CAfa,CAAhB;;AAiBA,MAAK,CAAED,SAAP,EAAmB;AAClB,WAAO,IAAP;AACA,GAzB+B,CA2BhC;AACA;AACA;;;AACA,MAAMS,SAAS,GAAGT,SAAS,CAACU,IAAV,IAAkBV,SAAS,CAACW,IAA9C;AACA,MAAMC,iBAAiB,GAAG,6BACzBZ,SADyB,EAEzB,mBAFyB,EAGzB,KAHyB,CAA1B;;AAMA,MAAKY,iBAAL,EAAyB;AACxB,WAAO,4BAAC,SAAD,6BAAgBf,KAAhB;AAAwB,MAAA,OAAO,EAAGM;AAAlC,OAAP;AACA,GAvC+B,CAyChC;;;AACA,MAAMU,kBAAkB,GAAG,6BAAiBb,SAAjB,EAA4B,WAA5B,EAAyC,IAAzC,IACxB,sCAA0BD,IAA1B,CADwB,GAExB,IAFH;AAGA,MAAMe,SAAS,GAAG,yBAAYD,kBAAZ,EAAgCf,UAAU,CAACgB,SAA3C,CAAlB;AAEA,SACC,4BAAC,SAAD,6BAAgBjB,KAAhB;AAAwB,IAAA,OAAO,EAAGM,OAAlC;AAA4C,IAAA,SAAS,EAAGW;AAAxD,KADD;AAGA,CAlDM;;;;eAoDQ,6BAAa,kBAAb,EAAmClB,IAAnC,C","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { pick } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { withFilters } from '@wordpress/components';\nimport {\n\tgetBlockDefaultClassName,\n\thasBlockSupport,\n\tgetBlockType,\n} from '@wordpress/blocks';\nimport deprecated from '@wordpress/deprecated';\nimport { useContext, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport BlockContext from '../block-context';\n\n/**\n * Default value used for blocks which do not define their own context needs,\n * used to guarantee that a block's `context` prop will always be an object. It\n * is assigned as a constant since it is always expected to be an empty object,\n * and in order to avoid unnecessary React reconciliations of a changing object.\n *\n * @type {{}}\n */\nconst DEFAULT_BLOCK_CONTEXT = {};\n\nexport const Edit = ( props ) => {\n\tconst { attributes = {}, name } = props;\n\tconst blockType = getBlockType( name );\n\tconst blockContext = useContext( BlockContext );\n\n\t// Assign context values using the block type's declared context needs.\n\tconst context = useMemo( () => {\n\t\tif ( blockType && blockType.context ) {\n\t\t\tdeprecated( 'Block type \"context\" option', {\n\t\t\t\talternative: '\"usesContext\"',\n\t\t\t\tversion: '8.6.0',\n\t\t\t\thint: `Block \"${ name }\".`,\n\t\t\t\tlink:\n\t\t\t\t\t'https://developer.wordpress.org/block-editor/developers/block-api/block-context/',\n\t\t\t} );\n\t\t\treturn pick( blockContext, blockType.context );\n\t\t}\n\n\t\treturn blockType && blockType.usesContext\n\t\t\t? pick( blockContext, blockType.usesContext )\n\t\t\t: DEFAULT_BLOCK_CONTEXT;\n\t}, [ blockType, blockContext ] );\n\n\tif ( ! blockType ) {\n\t\treturn null;\n\t}\n\n\t// `edit` and `save` are functions or components describing the markup\n\t// with which a block is displayed. If `blockType` is valid, assign\n\t// them preferentially as the render value for the block.\n\tconst Component = blockType.edit || blockType.save;\n\tconst lightBlockWrapper = hasBlockSupport(\n\t\tblockType,\n\t\t'lightBlockWrapper',\n\t\tfalse\n\t);\n\n\tif ( lightBlockWrapper ) {\n\t\treturn <Component { ...props } context={ context } />;\n\t}\n\n\t// Generate a class name for the block's editable form\n\tconst generatedClassName = hasBlockSupport( blockType, 'className', true )\n\t\t? getBlockDefaultClassName( name )\n\t\t: null;\n\tconst className = classnames( generatedClassName, attributes.className );\n\n\treturn (\n\t\t<Component { ...props } context={ context } className={ className } />\n\t);\n};\n\nexport default withFilters( 'editor.BlockEdit' )( Edit );\n"]}