{"version":3,"sources":["@wordpress/edit-navigation/src/store/resolvers.js"],"names":["getNavigationPostForMenu","menuId","stubPost","createStubPost","persistPost","args","KIND","POST_TYPE","id","menuItems","createNavigationBlock","navigationBlock","menuItemIdToClientId","type","postId","mapping","slug","status","blocks","meta","post","itemsByParentID","menuItemsToTreeOfBlocks","items","innerBlocks","sortedItems","item","menuItemInnerBlocks","length","block","convertMenuItemToBlock","clientId","push","menuItem","parsedBlocks","content","raw","originalContent","attributes","label","title","rendered","url"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { groupBy, sortBy } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { parse, createBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { resolveMenuItems, dispatch } from './controls';\nimport { KIND, POST_TYPE, buildNavigationPostId } from './utils';\n\n/**\n * Creates a \"stub\" navigation post reflecting the contents of menu with id=menuId. The\n * post is meant as a convenient to only exists in runtime and should never be saved. It\n * enables a convenient way of editing the navigation by using a regular post editor.\n *\n * Fetches all menu items, converts them into blocks, and hydrates a new post with them.\n *\n * @param {number} menuId The id of menu to create a post from\n * @return {void}\n */\nexport function* getNavigationPostForMenu( menuId ) {\n\tconst stubPost = createStubPost( menuId );\n\t// Persist an empty post to warm up the state\n\tyield persistPost( stubPost );\n\n\t// Dispatch startResolution to skip the execution of the real getEntityRecord resolver - it would\n\t// issue an http request and fail.\n\tconst args = [ KIND, POST_TYPE, stubPost.id ];\n\tyield dispatch( 'core', 'startResolution', 'getEntityRecord', args );\n\n\t// Now let's create a proper one hydrated using actual menu items\n\tconst menuItems = yield resolveMenuItems( menuId );\n\tconst [ navigationBlock, menuItemIdToClientId ] = createNavigationBlock(\n\t\tmenuItems\n\t);\n\tyield {\n\t\ttype: 'SET_MENU_ITEM_TO_CLIENT_ID_MAPPING',\n\t\tpostId: stubPost.id,\n\t\tmapping: menuItemIdToClientId,\n\t};\n\t// Persist the actual post containing the navigation block\n\tyield persistPost( createStubPost( menuId, navigationBlock ) );\n\n\t// Dispatch finishResolution to conclude startResolution dispatched earlier\n\tyield dispatch( 'core', 'finishResolution', 'getEntityRecord', args );\n}\n\nconst createStubPost = ( menuId, navigationBlock ) => {\n\tconst id = buildNavigationPostId( menuId );\n\treturn {\n\t\tid,\n\t\tslug: id,\n\t\tstatus: 'draft',\n\t\ttype: 'page',\n\t\tblocks: [ navigationBlock ],\n\t\tmeta: {\n\t\t\tmenuId,\n\t\t},\n\t};\n};\n\nconst persistPost = ( post ) =>\n\tdispatch(\n\t\t'core',\n\t\t'receiveEntityRecords',\n\t\tKIND,\n\t\tPOST_TYPE,\n\t\tpost,\n\t\t{ id: post.id },\n\t\tfalse\n\t);\n\n/**\n * Converts an adjacency list of menuItems into a navigation block.\n *\n * @param {Array} menuItems a list of menu items\n * @return {Object} Navigation block\n */\nfunction createNavigationBlock( menuItems ) {\n\tconst itemsByParentID = groupBy( menuItems, 'parent' );\n\tconst menuItemIdToClientId = {};\n\tconst menuItemsToTreeOfBlocks = ( items ) => {\n\t\tconst innerBlocks = [];\n\t\tif ( ! items ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sortedItems = sortBy( items, 'menu_order' );\n\t\tfor ( const item of sortedItems ) {\n\t\t\tlet menuItemInnerBlocks = [];\n\t\t\tif ( itemsByParentID[ item.id ]?.length ) {\n\t\t\t\tmenuItemInnerBlocks = menuItemsToTreeOfBlocks(\n\t\t\t\t\titemsByParentID[ item.id ]\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst block = convertMenuItemToBlock( item, menuItemInnerBlocks );\n\t\t\tmenuItemIdToClientId[ item.id ] = block.clientId;\n\t\t\tinnerBlocks.push( block );\n\t\t}\n\t\treturn innerBlocks;\n\t};\n\n\t// menuItemsToTreeOfBlocks takes an array of top-level menu items and recursively creates all their innerBlocks\n\tconst innerBlocks = menuItemsToTreeOfBlocks( itemsByParentID[ 0 ] || [] );\n\tconst navigationBlock = createBlock( 'core/navigation', {}, innerBlocks );\n\treturn [ navigationBlock, menuItemIdToClientId ];\n}\n\nfunction convertMenuItemToBlock( menuItem, innerBlocks = [] ) {\n\tif ( menuItem.type === 'html' ) {\n\t\tconst parsedBlocks = parse( menuItem.content.raw );\n\n\t\tif ( parsedBlocks.length !== 1 ) {\n\t\t\treturn createBlock( 'core/freeform', {\n\t\t\t\toriginalContent: menuItem.content.raw,\n\t\t\t} );\n\t\t}\n\n\t\treturn parsedBlocks[ 0 ];\n\t}\n\n\tconst attributes = {\n\t\tlabel: menuItem.title.rendered,\n\t\turl: menuItem.url,\n\t};\n\n\treturn createBlock( 'core/navigation-link', attributes, innerBlocks );\n}\n"]}