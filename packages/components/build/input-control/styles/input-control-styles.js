"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Suffix = exports.Prefix = exports.LegendText = exports.Legend = exports.Fieldset = exports.Label = exports.Input = exports.Container = exports.Root = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _flex = _interopRequireDefault(require("../../flex"));

var _text = _interopRequireDefault(require("../../text"));

var _styleMixins = require("../../utils/style-mixins");

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var FLOATING_LABEL_TRANSITION_SPEED = '60ms';

var rootFloatLabelStyles = function rootFloatLabelStyles(_ref6) {
  var isFloatingLabel = _ref6.isFloatingLabel;
  var paddingTop = isFloatingLabel ? 5 : 0;
  return /*#__PURE__*/(0, _core.css)({
    paddingTop: paddingTop
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var _ref = process.env.NODE_ENV === "production" ? {
  name: "r6z5ec",
  styles: "z-index:1;"
} : {
  name: "r6z5ec",
  styles: "z-index:1;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var rootFocusedStyles = function rootFocusedStyles(_ref7) {
  var isFocused = _ref7.isFocused;
  if (!isFocused) return '';
  return _ref;
};

var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "uz6002",
  styles: "align-items:flex-start;flex-direction:column;"
} : {
  name: "uz6002",
  styles: "align-items:flex-start;flex-direction:column;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "53hdd7",
  styles: "align-items:flex-start;flex-direction:column-reverse;"
} : {
  name: "53hdd7",
  styles: "align-items:flex-start;flex-direction:column-reverse;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var rootLabelPositionStyles = function rootLabelPositionStyles(_ref8) {
  var labelPosition = _ref8.labelPosition;

  switch (labelPosition) {
    case 'top':
      return _ref2;

    case 'bottom':
      return _ref3;

    default:
      return '';
  }
};

var Root = ( /*#__PURE__*/0, _styledBase.default)(_flex.default, {
  target: "e1cr7zh10",
  label: "Root"
})("position:relative;border-radius:2px;", rootFloatLabelStyles, ";", rootFocusedStyles, ";", rootLabelPositionStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Root = Root;

var containerDisabledStyles = function containerDisabledStyles(_ref9) {
  var disabled = _ref9.disabled;
  var backgroundColor = disabled ? (0, _styleMixins.color)('ui.backgroundDisabled') : (0, _styleMixins.color)('ui.background');
  return /*#__PURE__*/(0, _core.css)({
    backgroundColor: backgroundColor
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "8atqhb",
  styles: "width:100%;"
} : {
  name: "8atqhb",
  styles: "width:100%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var containerWidthStyles = function containerWidthStyles(_ref10) {
  var labelPosition = _ref10.labelPosition;
  if (labelPosition === 'side') return '';
  return _ref4;
};

var Container = (0, _styledBase.default)("div", {
  target: "e1cr7zh11",
  label: "Container"
})("align-items:center;box-sizing:border-box;border-radius:inherit;display:flex;flex:1;position:relative;", containerDisabledStyles, ";", containerWidthStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Container = Container;

var disabledStyles = function disabledStyles(_ref11) {
  var disabled = _ref11.disabled;
  if (!disabled) return '';
  return /*#__PURE__*/(0, _core.css)({
    color: (0, _styleMixins.color)('ui.textDisabled')
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var fontSizeStyles = function fontSizeStyles(_ref12) {
  var size = _ref12.size;
  var sizes = {
    default: '13px',
    small: '11px'
  };
  var fontSize = sizes[size];
  var fontSizeMobile = '16px';
  if (!fontSize) return '';
  return /*#__PURE__*/(0, _core.css)("font-size:", fontSizeMobile, ";@media ( min-width:600px ){font-size:", fontSize, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
};

var sizeStyles = function sizeStyles(_ref13) {
  var size = _ref13.size;
  var sizes = {
    default: {
      height: 30,
      lineHeight: 1,
      minHeight: 30
    },
    small: {
      height: 24,
      lineHeight: 1,
      minHeight: 24
    }
  };
  var style = sizes[size] || sizes.default;
  return /*#__PURE__*/(0, _core.css)(style, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var placeholderStyles = function placeholderStyles(_ref14) {
  var isFilled = _ref14.isFilled,
      isFloating = _ref14.isFloating,
      isFloatingLabel = _ref14.isFloatingLabel;
  var opacity = 1;

  if (isFloatingLabel) {
    if (!isFilled && !isFloating) {
      opacity = 0;
    }
  }

  return /*#__PURE__*/(0, _core.css)("&::placeholder{opacity:", opacity, ";}&::-webkit-input-placeholder{line-height:normal;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
};

var dragStyles = function dragStyles(_ref15) {
  var isDragging = _ref15.isDragging,
      dragCursor = _ref15.dragCursor;
  var defaultArrowStyles = '';
  var activeDragCursorStyles = '';

  if (isDragging) {
    defaultArrowStyles = /*#__PURE__*/(0, _core.css)("cursor:", dragCursor, ";user-select:none;&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{-webkit-appearance:none !important;margin:0 !important;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  }

  if (isDragging && dragCursor) {
    activeDragCursorStyles = /*#__PURE__*/(0, _core.css)("&:active{cursor:", dragCursor, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  }

  return /*#__PURE__*/(0, _core.css)(defaultArrowStyles, ";", activeDragCursorStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}; // TODO: Resolve need to use &&& to increase specificity
// https://github.com/WordPress/gutenberg/issues/18483


var Input = (0, _styledBase.default)("input", {
  target: "e1cr7zh12",
  label: "Input"
})("&&&{background-color:transparent;box-sizing:border-box;border:none;box-shadow:none !important;color:", (0, _styleMixins.color)('black'), ";display:block;outline:none;padding-left:8px;padding-right:8px;width:100%;", dragStyles, ";", disabledStyles, ";", fontSizeStyles, ";", sizeStyles, ";", placeholderStyles, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Input = Input;

var laberColor = function laberColor(_ref16) {
  var isFloatingLabel = _ref16.isFloatingLabel,
      isFilled = _ref16.isFilled,
      isFloating = _ref16.isFloating;
  var isPlaceholder = isFloatingLabel && !isFilled;
  var textColor = isPlaceholder || isFloating ? (0, _styleMixins.color)('ui.textDisabled') : 'currentColor';
  return /*#__PURE__*/(0, _core.css)({
    color: textColor
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var labelFontSize = function labelFontSize(_ref17) {
  var isFloatingLabel = _ref17.isFloatingLabel,
      size = _ref17.size;
  var sizes = {
    default: '13px',
    small: '11px'
  };
  var fontSize = sizes[size];
  var lineHeight = isFloatingLabel ? 1.2 : null;
  return /*#__PURE__*/(0, _core.css)({
    fontSize: fontSize,
    lineHeight: lineHeight
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var labelPosition = function labelPosition(_ref18) {
  var isFloatingLabel = _ref18.isFloatingLabel,
      isFloating = _ref18.isFloating,
      size = _ref18.size;
  var paddingBottom = isFloatingLabel ? 0 : 4;
  var position = isFloatingLabel ? 'absolute' : null;
  var pointerEvents = isFloating ? null : 'none';
  var isSmall = size === 'small';
  var offsetTop = isSmall ? 1 : 2;
  var offset = isSmall ? '-1px' : '-3px';
  var marginTop = isFloating ? 0 : offsetTop;
  var marginLeft = isFloatingLabel ? 8 : 0;
  var transform = isFloating ? "translate( 0, calc(-100% + ".concat(offset, ") ) scale( 0.75 )") : 'translate( 0, -50%) scale(1)';

  if (!isFloatingLabel) {
    transform = null;
  }

  var transition = isFloatingLabel ? "transform ".concat(FLOATING_LABEL_TRANSITION_SPEED, " linear") : null;
  return /*#__PURE__*/(0, _core.css)({
    marginTop: marginTop,
    paddingBottom: paddingBottom,
    position: position,
    pointerEvents: pointerEvents,
    transition: transition,
    transform: transform
  }, (0, _styleMixins.rtl)({
    marginLeft: marginLeft
  })(), (0, _styleMixins.rtl)({
    transformOrigin: 'top left'
  }, {
    transformOrigin: 'top right'
  })(), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "fjfd5j",
  styles: "max-width:calc( 100% - 10px );overflow:hidden;text-overflow:ellipsis;white-space:nowrap;"
} : {
  name: "fjfd5j",
  styles: "max-width:calc( 100% - 10px );overflow:hidden;text-overflow:ellipsis;white-space:nowrap;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNlFXIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IEZsZXggZnJvbSAnLi4vLi4vZmxleCc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi8uLi90ZXh0JztcbmltcG9ydCB7IGNvbG9yLCBydGwsIHJlZHVjZU1vdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlLW1peGlucyc7XG5cbmNvbnN0IEZMT0FUSU5HX0xBQkVMX1RSQU5TSVRJT05fU1BFRUQgPSAnNjBtcyc7XG5cbmNvbnN0IHJvb3RGbG9hdExhYmVsU3R5bGVzID0gKCB7IGlzRmxvYXRpbmdMYWJlbCB9ICkgPT4ge1xuXHRjb25zdCBwYWRkaW5nVG9wID0gaXNGbG9hdGluZ0xhYmVsID8gNSA6IDA7XG5cdHJldHVybiBjc3MoIHsgcGFkZGluZ1RvcCB9ICk7XG59O1xuXG5jb25zdCByb290Rm9jdXNlZFN0eWxlcyA9ICggeyBpc0ZvY3VzZWQgfSApID0+IHtcblx0aWYgKCAhIGlzRm9jdXNlZCApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzKCB7IHpJbmRleDogMSB9ICk7XG59O1xuXG5jb25zdCByb290TGFiZWxQb3NpdGlvblN0eWxlcyA9ICggeyBsYWJlbFBvc2l0aW9uIH0gKSA9PiB7XG5cdHN3aXRjaCAoIGxhYmVsUG9zaXRpb24gKSB7XG5cdFx0Y2FzZSAndG9wJzpcblx0XHRcdHJldHVybiBjc3NgXG5cdFx0XHRcdGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuXHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0YDtcblx0XHRjYXNlICdib3R0b20nOlxuXHRcdFx0cmV0dXJuIGNzc2Bcblx0XHRcdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcblx0XHRcdGA7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiAnJztcblx0fVxufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQoIEZsZXggKWBcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRib3JkZXItcmFkaXVzOiAycHg7XG5cblx0JHsgcm9vdEZsb2F0TGFiZWxTdHlsZXMgfTtcblx0JHsgcm9vdEZvY3VzZWRTdHlsZXMgfTtcblx0JHsgcm9vdExhYmVsUG9zaXRpb25TdHlsZXMgfTtcbmA7XG5cbmNvbnN0IGNvbnRhaW5lckRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH0gKSA9PiB7XG5cdGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGRpc2FibGVkXG5cdFx0PyBjb2xvciggJ3VpLmJhY2tncm91bmREaXNhYmxlZCcgKVxuXHRcdDogY29sb3IoICd1aS5iYWNrZ3JvdW5kJyApO1xuXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZENvbG9yIH0gKTtcbn07XG5cbmNvbnN0IGNvbnRhaW5lcldpZHRoU3R5bGVzID0gKCB7IGxhYmVsUG9zaXRpb24gfSApID0+IHtcblx0aWYgKCBsYWJlbFBvc2l0aW9uID09PSAnc2lkZScgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHR3aWR0aDogMTAwJTtcblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4OiAxO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0JHsgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgfTtcblx0JHsgY29udGFpbmVyV2lkdGhTdHlsZXMgfTtcbmA7XG5cbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH0gKSA9PiB7XG5cdGlmICggISBkaXNhYmxlZCApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzKCB7XG5cdFx0Y29sb3I6IGNvbG9yKCAndWkudGV4dERpc2FibGVkJyApLFxuXHR9ICk7XG59O1xuXG5jb25zdCBmb250U2l6ZVN0eWxlcyA9ICggeyBzaXplIH0gKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6ICcxM3B4Jyxcblx0XHRzbWFsbDogJzExcHgnLFxuXHR9O1xuXG5cdGNvbnN0IGZvbnRTaXplID0gc2l6ZXNbIHNpemUgXTtcblx0Y29uc3QgZm9udFNpemVNb2JpbGUgPSAnMTZweCc7XG5cblx0aWYgKCAhIGZvbnRTaXplICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZU1vYmlsZSB9O1xuXG5cdFx0QG1lZGlhICggbWluLXdpZHRoOiA2MDBweCApIHtcblx0XHRcdGZvbnQtc2l6ZTogJHsgZm9udFNpemUgfTtcblx0XHR9XG5cdGA7XG59O1xuXG5jb25zdCBzaXplU3R5bGVzID0gKCB7IHNpemUgfSApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDoge1xuXHRcdFx0aGVpZ2h0OiAzMCxcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDMwLFxuXHRcdH0sXG5cdFx0c21hbGw6IHtcblx0XHRcdGhlaWdodDogMjQsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAyNCxcblx0XHR9LFxuXHR9O1xuXG5cdGNvbnN0IHN0eWxlID0gc2l6ZXNbIHNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xuXG5cdHJldHVybiBjc3MoIHN0eWxlICk7XG59O1xuXG5jb25zdCBwbGFjZWhvbGRlclN0eWxlcyA9ICggeyBpc0ZpbGxlZCwgaXNGbG9hdGluZywgaXNGbG9hdGluZ0xhYmVsIH0gKSA9PiB7XG5cdGxldCBvcGFjaXR5ID0gMTtcblxuXHRpZiAoIGlzRmxvYXRpbmdMYWJlbCApIHtcblx0XHRpZiAoICEgaXNGaWxsZWQgJiYgISBpc0Zsb2F0aW5nICkge1xuXHRcdFx0b3BhY2l0eSA9IDA7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHQmOjpwbGFjZWhvbGRlciB7XG5cdFx0XHRvcGFjaXR5OiAkeyBvcGFjaXR5IH07XG5cdFx0fVxuXG5cdFx0Jjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG5cdFx0XHRsaW5lLWhlaWdodDogbm9ybWFsO1xuXHRcdH1cblx0YDtcbn07XG5cbmNvbnN0IGRyYWdTdHlsZXMgPSAoIHsgaXNEcmFnZ2luZywgZHJhZ0N1cnNvciB9ICkgPT4ge1xuXHRsZXQgZGVmYXVsdEFycm93U3R5bGVzID0gJyc7XG5cdGxldCBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzID0gJyc7XG5cblx0aWYgKCBpc0RyYWdnaW5nICkge1xuXHRcdGRlZmF1bHRBcnJvd1N0eWxlcyA9IGNzc2Bcblx0XHRcdGN1cnNvcjogJHsgZHJhZ0N1cnNvciB9O1xuXHRcdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cblx0XHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7XG5cdFx0XHRcdG1hcmdpbjogMCAhaW1wb3J0YW50O1xuXHRcdFx0fVxuXHRcdGA7XG5cdH1cblxuXHRpZiAoIGlzRHJhZ2dpbmcgJiYgZHJhZ0N1cnNvciApIHtcblx0XHRhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzID0gY3NzYFxuXHRcdFx0JjphY3RpdmUge1xuXHRcdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHQkeyBkZWZhdWx0QXJyb3dTdHlsZXMgfTtcblx0XHQkeyBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzIH07XG5cdGA7XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBJbnB1dCA9IHN0eWxlZC5pbnB1dGBcblx0JiYmIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG5cdFx0Y29sb3I6ICR7IGNvbG9yKCAnYmxhY2snICkgfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdHBhZGRpbmctbGVmdDogOHB4O1xuXHRcdHBhZGRpbmctcmlnaHQ6IDhweDtcblx0XHR3aWR0aDogMTAwJTtcblxuXHRcdCR7IGRyYWdTdHlsZXMgfTtcblx0XHQkeyBkaXNhYmxlZFN0eWxlcyB9O1xuXHRcdCR7IGZvbnRTaXplU3R5bGVzIH07XG5cdFx0JHsgc2l6ZVN0eWxlcyB9O1xuXG5cdFx0JHsgcGxhY2Vob2xkZXJTdHlsZXMgfTtcblx0fVxuYDtcblxuY29uc3QgbGFiZXJDb2xvciA9ICggeyBpc0Zsb2F0aW5nTGFiZWwsIGlzRmlsbGVkLCBpc0Zsb2F0aW5nIH0gKSA9PiB7XG5cdGNvbnN0IGlzUGxhY2Vob2xkZXIgPSBpc0Zsb2F0aW5nTGFiZWwgJiYgISBpc0ZpbGxlZDtcblx0Y29uc3QgdGV4dENvbG9yID1cblx0XHRpc1BsYWNlaG9sZGVyIHx8IGlzRmxvYXRpbmdcblx0XHRcdD8gY29sb3IoICd1aS50ZXh0RGlzYWJsZWQnIClcblx0XHRcdDogJ2N1cnJlbnRDb2xvcic7XG5cblx0cmV0dXJuIGNzcyggeyBjb2xvcjogdGV4dENvbG9yIH0gKTtcbn07XG5cbmNvbnN0IGxhYmVsRm9udFNpemUgPSAoIHsgaXNGbG9hdGluZ0xhYmVsLCBzaXplIH0gKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6ICcxM3B4Jyxcblx0XHRzbWFsbDogJzExcHgnLFxuXHR9O1xuXHRjb25zdCBmb250U2l6ZSA9IHNpemVzWyBzaXplIF07XG5cdGNvbnN0IGxpbmVIZWlnaHQgPSBpc0Zsb2F0aW5nTGFiZWwgPyAxLjIgOiBudWxsO1xuXG5cdHJldHVybiBjc3MoIHsgZm9udFNpemUsIGxpbmVIZWlnaHQgfSApO1xufTtcblxuY29uc3QgbGFiZWxQb3NpdGlvbiA9ICggeyBpc0Zsb2F0aW5nTGFiZWwsIGlzRmxvYXRpbmcsIHNpemUgfSApID0+IHtcblx0Y29uc3QgcGFkZGluZ0JvdHRvbSA9IGlzRmxvYXRpbmdMYWJlbCA/IDAgOiA0O1xuXHRjb25zdCBwb3NpdGlvbiA9IGlzRmxvYXRpbmdMYWJlbCA/ICdhYnNvbHV0ZScgOiBudWxsO1xuXHRjb25zdCBwb2ludGVyRXZlbnRzID0gaXNGbG9hdGluZyA/IG51bGwgOiAnbm9uZSc7XG5cblx0Y29uc3QgaXNTbWFsbCA9IHNpemUgPT09ICdzbWFsbCc7XG5cblx0Y29uc3Qgb2Zmc2V0VG9wID0gaXNTbWFsbCA/IDEgOiAyO1xuXHRjb25zdCBvZmZzZXQgPSBpc1NtYWxsID8gJy0xcHgnIDogJy0zcHgnO1xuXG5cdGNvbnN0IG1hcmdpblRvcCA9IGlzRmxvYXRpbmcgPyAwIDogb2Zmc2V0VG9wO1xuXHRjb25zdCBtYXJnaW5MZWZ0ID0gaXNGbG9hdGluZ0xhYmVsID8gOCA6IDA7XG5cblx0bGV0IHRyYW5zZm9ybSA9IGlzRmxvYXRpbmdcblx0XHQ/IGB0cmFuc2xhdGUoIDAsIGNhbGMoLTEwMCUgKyAkeyBvZmZzZXQgfSkgKSBzY2FsZSggMC43NSApYFxuXHRcdDogJ3RyYW5zbGF0ZSggMCwgLTUwJSkgc2NhbGUoMSknO1xuXG5cdGlmICggISBpc0Zsb2F0aW5nTGFiZWwgKSB7XG5cdFx0dHJhbnNmb3JtID0gbnVsbDtcblx0fVxuXG5cdGNvbnN0IHRyYW5zaXRpb24gPSBpc0Zsb2F0aW5nTGFiZWxcblx0XHQ/IGB0cmFuc2Zvcm0gJHsgRkxPQVRJTkdfTEFCRUxfVFJBTlNJVElPTl9TUEVFRCB9IGxpbmVhcmBcblx0XHQ6IG51bGw7XG5cblx0cmV0dXJuIGNzcyhcblx0XHR7XG5cdFx0XHRtYXJnaW5Ub3AsXG5cdFx0XHRwYWRkaW5nQm90dG9tLFxuXHRcdFx0cG9zaXRpb24sXG5cdFx0XHRwb2ludGVyRXZlbnRzLFxuXHRcdFx0dHJhbnNpdGlvbixcblx0XHRcdHRyYW5zZm9ybSxcblx0XHR9LFxuXHRcdHJ0bCggeyBtYXJnaW5MZWZ0IH0gKSgpLFxuXHRcdHJ0bChcblx0XHRcdHsgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnIH0sXG5cdFx0XHR7IHRyYW5zZm9ybU9yaWdpbjogJ3RvcCByaWdodCcgfVxuXHRcdCkoKVxuXHQpO1xufTtcblxuY29uc3QgbGFiZWxUcnVuY2F0aW9uID0gKCB7IGlzRmxvYXRpbmcgfSApID0+IHtcblx0aWYgKCBpc0Zsb2F0aW5nICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0bWF4LXdpZHRoOiBjYWxjKCAxMDAlIC0gMTBweCApO1xuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0YDtcbn07XG5cbmNvbnN0IEJhc2VMYWJlbCA9IHN0eWxlZCggVGV4dCApYFxuXHQmJiYge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdG1heC13aWR0aDogMTAwJTtcblx0XHRwYWRkaW5nLWJvdHRvbTogMDtcblx0XHRwYWRkaW5nLXRvcDogMDtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0XHR0b3A6IDUwJTtcblx0XHR0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gJHsgRkxPQVRJTkdfTEFCRUxfVFJBTlNJVElPTl9TUEVFRCB9IGxpbmVhcixcblx0XHRcdG1heC13aWR0aCAkeyBGTE9BVElOR19MQUJFTF9UUkFOU0lUSU9OX1NQRUVEIH0gbGluZWFyO1xuXHRcdHotaW5kZXg6IDE7XG5cblx0XHQkeyBsYWJlckNvbG9yIH07XG5cdFx0JHsgbGFiZWxGb250U2l6ZSB9O1xuXHRcdCR7IGxhYmVsUG9zaXRpb24gfTtcblx0XHQkeyBsYWJlbFRydW5jYXRpb24gfTtcblx0XHQkeyByZWR1Y2VNb3Rpb24oICd0cmFuc2l0aW9uJyApIH07XG5cblx0XHQkeyBydGwoIHsgbGVmdDogMCB9ICkgfVxuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgTGFiZWwgPSAoIHByb3BzICkgPT4gPEJhc2VMYWJlbCB7IC4uLnByb3BzIH0gYXM9XCJsYWJlbFwiIC8+O1xuXG5jb25zdCBmaWVsZHNldFRvcFN0eWxlcyA9ICggeyBpc0Zsb2F0aW5nTGFiZWwgfSApID0+IHtcblx0Y29uc3QgdG9wID0gaXNGbG9hdGluZ0xhYmVsID8gLTUgOiAwO1xuXHRyZXR1cm4gY3NzKCB7IHRvcCB9ICk7XG59O1xuXG5jb25zdCBmaWVsZHNldEZvY3VzZWRTdHlsZXMgPSAoIHsgZGlzYWJsZWQsIGlzRm9jdXNlZCB9ICkgPT4ge1xuXHRsZXQgYm9yZGVyQ29sb3IgPSBpc0ZvY3VzZWRcblx0XHQ/IGNvbG9yKCAndWkuYm9yZGVyRm9jdXMnIClcblx0XHQ6IGNvbG9yKCAndWkuYm9yZGVyJyApO1xuXG5cdGlmICggZGlzYWJsZWQgKSB7XG5cdFx0Ym9yZGVyQ29sb3IgPSAndWkuYm9yZGVyRGlzYWJsZWQnO1xuXHR9XG5cblx0Y29uc3QgYm9yZGVyV2lkdGggPSBpc0ZvY3VzZWQgPyAyIDogMTtcblx0Y29uc3QgYm9yZGVyU3R5bGUgPSAnc29saWQnO1xuXG5cdHJldHVybiBjc3MoIHsgYm9yZGVyQ29sb3IsIGJvcmRlclN0eWxlLCBib3JkZXJXaWR0aCB9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgRmllbGRzZXQgPSBzdHlsZWQuZmllbGRzZXRgXG5cdCYmJiB7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuXHRcdGJvdHRvbTogMDtcblx0XHRsZWZ0OiAwO1xuXHRcdG1hcmdpbjogMDtcblx0XHRwYWRkaW5nOiAwO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRyaWdodDogMDtcblxuXHRcdCR7IGZpZWxkc2V0Rm9jdXNlZFN0eWxlcyB9O1xuXHRcdCR7IGZpZWxkc2V0VG9wU3R5bGVzIH07XG5cdFx0JHsgcnRsKCB7IHBhZGRpbmdMZWZ0OiAyIH0gKSB9XG5cdH1cbmA7XG5cbmNvbnN0IGxlZ2VuZFNpemUgPSAoIHsgaXNGbG9hdGluZywgc2l6ZSB9ICkgPT4ge1xuXHRjb25zdCBtYXhXaWR0aCA9IGlzRmxvYXRpbmcgPyAxMDAwIDogMC4wMTtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogOS43NSxcblx0XHRzbWFsbDogOC4yNSxcblx0fTtcblxuXHRjb25zdCBmb250U2l6ZSA9IHNpemVzWyBzaXplIF07XG5cblx0cmV0dXJuIGNzcygge1xuXHRcdGZvbnRTaXplLFxuXHRcdG1heFdpZHRoLFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgTGVnZW5kID0gc3R5bGVkLmxlZ2VuZGBcblx0JiYmIHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdGhlaWdodDogMTFweDtcblx0XHRsaW5lLWhlaWdodDogMTFweDtcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0XHR0cmFuc2l0aW9uOiBtYXgtd2lkdGggJHsgRkxPQVRJTkdfTEFCRUxfVFJBTlNJVElPTl9TUEVFRCB9IGxpbmVhcjtcblx0XHR2aXNpYmlsaXR5OiBoaWRkZW47XG5cdFx0d2lkdGg6IGF1dG87XG5cblx0XHQkeyBsZWdlbmRTaXplIH07XG5cdFx0JHsgcmVkdWNlTW90aW9uKCAndHJhbnNpdGlvbicgKSB9O1xuXHR9XG5gO1xuXG5jb25zdCBCYXNlTGVnZW5kVGV4dCA9IHN0eWxlZCggVGV4dCApYFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdCR7IHJ0bCggeyBwYWRkaW5nTGVmdDogNCwgcGFkZGluZ1JpZ2h0OiA1IH0gKSB9XG5gO1xuXG5leHBvcnQgY29uc3QgTGVnZW5kVGV4dCA9ICggcHJvcHMgKSA9PiAoXG5cdDxCYXNlTGVnZW5kVGV4dCB7IC4uLnByb3BzIH0gYXM9XCJzcGFuXCIgLz5cbik7XG5cbmV4cG9ydCBjb25zdCBQcmVmaXggPSBzdHlsZWQuc3BhbmBcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgU3VmZml4ID0gc3R5bGVkLnNwYW5gXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGRpc3BsYXk6IGJsb2NrO1xuYDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var labelTruncation = function labelTruncation(_ref19) {
  var isFloating = _ref19.isFloating;
  if (isFloating) return '';
  return _ref5;
};

var BaseLabel = ( /*#__PURE__*/0, _styledBase.default)(_text.default, {
  target: "e1cr7zh13",
  label: "BaseLabel"
})("&&&{box-sizing:border-box;display:block;margin:0;max-width:100%;padding-bottom:0;padding-top:0;pointer-events:none;top:50%;transition:transform ", FLOATING_LABEL_TRANSITION_SPEED, " linear,max-width ", FLOATING_LABEL_TRANSITION_SPEED, " linear;z-index:1;", laberColor, ";", labelFontSize, ";", labelPosition, ";", labelTruncation, ";", (0, _styleMixins.reduceMotion)('transition'), ";", (0, _styleMixins.rtl)({
  left: 0
}), "}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Label = function Label(props) {
  return (0, _element.createElement)(BaseLabel, (0, _extends2.default)({}, props, {
    as: "label"
  }));
};

exports.Label = Label;

var fieldsetTopStyles = function fieldsetTopStyles(_ref20) {
  var isFloatingLabel = _ref20.isFloatingLabel;
  var top = isFloatingLabel ? -5 : 0;
  return /*#__PURE__*/(0, _core.css)({
    top: top
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var fieldsetFocusedStyles = function fieldsetFocusedStyles(_ref21) {
  var disabled = _ref21.disabled,
      isFocused = _ref21.isFocused;
  var borderColor = isFocused ? (0, _styleMixins.color)('ui.borderFocus') : (0, _styleMixins.color)('ui.border');

  if (disabled) {
    borderColor = 'ui.borderDisabled';
  }

  var borderWidth = isFocused ? 2 : 1;
  var borderStyle = 'solid';
  return /*#__PURE__*/(0, _core.css)({
    borderColor: borderColor,
    borderStyle: borderStyle,
    borderWidth: borderWidth
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var Fieldset = (0, _styledBase.default)("fieldset", {
  target: "e1cr7zh14",
  label: "Fieldset"
})("&&&{box-sizing:border-box;border-radius:inherit;bottom:0;left:0;margin:0;padding:0;pointer-events:none;position:absolute;right:0;", fieldsetFocusedStyles, ";", fieldsetTopStyles, ";", (0, _styleMixins.rtl)({
  paddingLeft: 2
}), "}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Fieldset = Fieldset;

var legendSize = function legendSize(_ref22) {
  var isFloating = _ref22.isFloating,
      size = _ref22.size;
  var maxWidth = isFloating ? 1000 : 0.01;
  var sizes = {
    default: 9.75,
    small: 8.25
  };
  var fontSize = sizes[size];
  return /*#__PURE__*/(0, _core.css)({
    fontSize: fontSize,
    maxWidth: maxWidth
  }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var Legend = (0, _styledBase.default)("legend", {
  target: "e1cr7zh15",
  label: "Legend"
})("&&&{box-sizing:border-box;display:block;height:11px;line-height:11px;margin:0;padding:0;transition:max-width ", FLOATING_LABEL_TRANSITION_SPEED, " linear;visibility:hidden;width:auto;", legendSize, ";", (0, _styleMixins.reduceMotion)('transition'), ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Legend = Legend;
var BaseLegendText = ( /*#__PURE__*/0, _styledBase.default)(_text.default, {
  target: "e1cr7zh16",
  label: "BaseLegendText"
})("box-sizing:border-box;display:inline-block;", (0, _styleMixins.rtl)({
  paddingLeft: 4,
  paddingRight: 5
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

var LegendText = function LegendText(props) {
  return (0, _element.createElement)(BaseLegendText, (0, _extends2.default)({}, props, {
    as: "span"
  }));
};

exports.LegendText = LegendText;
var Prefix = (0, _styledBase.default)("span", {
  target: "e1cr7zh17",
  label: "Prefix"
})(process.env.NODE_ENV === "production" ? {
  name: "1pxuk39",
  styles: "box-sizing:border-box;display:block;"
} : {
  name: "1pxuk39",
  styles: "box-sizing:border-box;display:block;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.Prefix = Prefix;
var Suffix = (0, _styledBase.default)("span", {
  target: "e1cr7zh18",
  label: "Suffix"
})(process.env.NODE_ENV === "production" ? {
  name: "1pxuk39",
  styles: "box-sizing:border-box;display:block;"
} : {
  name: "1pxuk39",
  styles: "box-sizing:border-box;display:block;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.Suffix = Suffix;
//# sourceMappingURL=input-control-styles.js.map